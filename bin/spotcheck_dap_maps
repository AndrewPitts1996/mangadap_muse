#!/usr/bin/env python3

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

import os
import glob
import time

from argparse import ArgumentParser

from astropy.io import fits
from matplotlib import pyplot
from matplotlib.ticker import NullFormatter
from matplotlib import rc

from mangadap.par.analysisplan import AnalysisPlanSet
from mangadap.dapmaps import DAPMapsBitMask
from mangadap.config.defaults import default_dap_method, default_dap_method_path
from mangadap.config.defaults import default_dap_plan_file

#-----------------------------------------------------------------------------

def growth_lim(a, lim, fac):
    _a = a.compressed()
    srt = numpy.ma.argsort(_a)
    start = int(len(_a)*(1.0-lim)/2)
    end = int(len(_a)*(lim + (1.0-lim)/2))
    Da = (_a[srt[start]] - _a[srt[end]])*fac
    mid = (_a[srt[start]] + _a[srt[end]])/2
    return [ mid - Da/2, mid + Da/2 ]

    
def column_dictionary(hdu, ext):
    columndict = {}
    for k, v in hdu[ext].header.items():
        if k[0] == 'C':
            try:
                i = int(k[1:])-1
            except ValueError:
                continue
            columndict[v] = i
    return columndict


def init_ax(fig, pos):
    ax = fig.add_axes(pos, axisbg='0.9')
    ax.minorticks_on()
    ax.grid(True, which='major', color='0.8', zorder=0, linestyle='-')
#    ax.grid(True, which='minor', color='0.7', zorder=0, linestyle=':')
    return ax


# Test images:
#  - SPX_MFLUX, SPX_SNR, BINID, BIN_SNR
#  - STELLAR_CONT_FRESID, STELLAR_CONT_CHI2, STELLAR_VEL, STELLAR_SIGMA
#  - EMLINE_SFLUX, EMLINE_GFLUX, EMLINE_GVEL, EMLINE_GSIGMA - all H-alpha
#  - EMLINE_SFLUX (H-beta), EMLINE_GFLUX (H-beta), D4000, Dn4000
def spotcheck_images(analysis_path, daptype, plate, ifudesign, ofile=None, drpver=None,
                     dapver=None):

    bm = DAPMapsBitMask()

    plan_dir = default_dap_method_path(daptype, plate=plate, ifudesign=ifudesign, drpver=drpver,
                                       dapver=dapver, analysis_path=analysis_path)
    ifile = os.path.join(plan_dir, 'manga-{0}-{1}-MAPS-{2}.fits.gz'.format(plate, ifudesign,
                                                                           daptype))

    if not os.path.isfile(ifile):
        raise FileNotFoundError('No file: {0}'.format(ifile))

    hdu = fits.open(ifile)

    # Check everything is finite
    # TODO: Change this to a soft fault?
    num_ext = 43
    for i in range(num_ext):
        if not numpy.all(numpy.isfinite(hdu[i+1].data)):
            raise ValueError('HDU {0} contains infs or NaNs!'.format(hdu[i+1].data))

    # Build the column dictionaries
    emline = column_dictionary(hdu, 'EMLINE_GFLUX')
    specindex = column_dictionary(hdu, 'SPECINDEX')

    # Get the data to plot
    spxflx = numpy.ma.MaskedArray(hdu['SPX_MFLUX'].data.copy())
    extent = [0.5, spxflx.shape[0]+0.5, 0.5, spxflx.shape[1]+0.5 ]
    spxsnr = numpy.ma.MaskedArray(hdu['SPX_SNR'].data.copy())
    binid = numpy.ma.MaskedArray(hdu['BINID'].data.copy(), mask=hdu['BINID'].data<0)
    binsnr = numpy.ma.MaskedArray(hdu['BIN_SNR'].data.copy(), mask=hdu['BIN_MFLUX_MASK'].data>0)

    scfres = numpy.ma.MaskedArray(hdu['STELLAR_CONT_FRESID'].data.copy()[0,:,:],
                                  mask=~(hdu['STELLAR_CONT_FRESID'].data[0,:,:] > 0))
                                  #bm.flagged(hdu['STELLAR_VEL_MASK'].data, 'DONOTUSE'))
    scrchi = numpy.ma.MaskedArray(hdu['STELLAR_CONT_RCHI2'].data.copy(),
                                  mask=~(hdu['STELLAR_CONT_RCHI2'].data > 0))
                                  #mask=bm.flagged(hdu['STELLAR_VEL_MASK'].data, 'DONOTUSE'))
    strvel = numpy.ma.MaskedArray(hdu['STELLAR_VEL'].data.copy(),
                                  mask=bm.flagged(hdu['STELLAR_VEL_MASK'].data, 'DONOTUSE'))
    ustrvel = numpy.ma.MaskedArray(hdu['STELLAR_VEL'].data.copy(),
                                  mask=~bm.flagged(hdu['STELLAR_VEL_MASK'].data, 'UNRELIABLE'))
    ustrvel[~numpy.ma.getmaskarray(ustrvel)] = 0.0
    strsig = numpy.ma.MaskedArray(hdu['STELLAR_SIGMA'].data.copy(),
                                  mask=bm.flagged(hdu['STELLAR_SIGMA_MASK'].data, 'DONOTUSE'))
    ustrsig = numpy.ma.MaskedArray(hdu['STELLAR_SIGMA'].data.copy(),
                                  mask=~bm.flagged(hdu['STELLAR_SIGMA_MASK'].data,
                                                   'UNRELIABLE'))
    ustrsig[~numpy.ma.getmaskarray(ustrsig)] = 0.0

    hasflx = numpy.ma.MaskedArray(hdu['EMLINE_SFLUX'].data.copy()[emline['Ha-6564'],:,:],
            mask=bm.flagged(hdu['EMLINE_SFLUX_MASK'].data[emline['Ha-6564'],:,:], 'DONOTUSE'))
    uhasflx = numpy.ma.MaskedArray(hdu['EMLINE_SFLUX'].data.copy()[emline['Ha-6564'],:,:],
          mask=~bm.flagged(hdu['EMLINE_SFLUX_MASK'].data[emline['Ha-6564'],:,:], 'UNRELIABLE'))
    uhasflx[~numpy.ma.getmaskarray(uhasflx)] = 0.0
    hagflx = numpy.ma.MaskedArray(hdu['EMLINE_GFLUX'].data.copy()[emline['Ha-6564'],:,:],
          mask=bm.flagged(hdu['EMLINE_GFLUX_MASK'].data[emline['Ha-6564'],:,:], 'DONOTUSE'))
    uhagflx = numpy.ma.MaskedArray(hdu['EMLINE_GFLUX'].data.copy()[emline['Ha-6564'],:,:],
          mask=~bm.flagged(hdu['EMLINE_GFLUX_MASK'].data[emline['Ha-6564'],:,:], 'UNRELIABLE'))
    uhagflx[~numpy.ma.getmaskarray(uhagflx)] = 0.0
    hagvel = numpy.ma.MaskedArray(hdu['EMLINE_GVEL'].data.copy()[emline['Ha-6564'],:,:],
          mask=bm.flagged(hdu['EMLINE_GVEL_MASK'].data[emline['Ha-6564'],:,:], 'DONOTUSE'))
    uhagvel = numpy.ma.MaskedArray(hdu['EMLINE_GVEL'].data.copy()[emline['Ha-6564'],:,:],
          mask=~bm.flagged(hdu['EMLINE_GVEL_MASK'].data[emline['Ha-6564'],:,:], 'UNRELIABLE'))
    uhagvel[~numpy.ma.getmaskarray(uhagvel)] = 0.0
    hagsig = numpy.ma.MaskedArray(hdu['EMLINE_GSIGMA'].data.copy()[emline['Ha-6564'],:,:],
        mask=bm.flagged(hdu['EMLINE_GSIGMA_MASK'].data[emline['Ha-6564'],:,:], 'DONOTUSE'))
    uhagsig = numpy.ma.MaskedArray(hdu['EMLINE_GSIGMA'].data.copy()[emline['Ha-6564'],:,:],
        mask=~bm.flagged(hdu['EMLINE_GSIGMA_MASK'].data[emline['Ha-6564'],:,:], 'UNRELIABLE'))
    uhagsig[~numpy.ma.getmaskarray(uhagsig)] = 0.0

    hbsflx = numpy.ma.MaskedArray(hdu['EMLINE_SFLUX'].data.copy()[emline['Hb-4862'],:,:],
          mask=bm.flagged(hdu['EMLINE_SFLUX_MASK'].data[emline['Hb-4862'],:,:], 'DONOTUSE'))
    uhbsflx = numpy.ma.MaskedArray(hdu['EMLINE_SFLUX'].data.copy()[emline['Hb-4862'],:,:],
          mask=~bm.flagged(hdu['EMLINE_SFLUX_MASK'].data[emline['Hb-4862'],:,:], 'UNRELIABLE'))
    uhbsflx[~numpy.ma.getmaskarray(uhbsflx)] = 0.0
    hbgflx = numpy.ma.MaskedArray(hdu['EMLINE_GFLUX'].data.copy()[emline['Hb-4862'],:,:],
          mask=bm.flagged(hdu['EMLINE_GFLUX_MASK'].data[emline['Hb-4862'],:,:], 'DONOTUSE'))
    uhbgflx = numpy.ma.MaskedArray(hdu['EMLINE_GFLUX'].data.copy()[emline['Hb-4862'],:,:],
          mask=~bm.flagged(hdu['EMLINE_GFLUX_MASK'].data[emline['Hb-4862'],:,:], 'UNRELIABLE'))
    uhbgflx[~numpy.ma.getmaskarray(uhbgflx)] = 0.0

    d4000 = numpy.ma.MaskedArray(hdu['SPECINDEX'].data.copy()[specindex['D4000'],:,:],
         mask=bm.flagged(hdu['SPECINDEX_MASK'].data[specindex['D4000'],:,:], 'DONOTUSE'))
    ud4000 = numpy.ma.MaskedArray(hdu['SPECINDEX'].data.copy()[specindex['D4000'],:,:],
         mask=~bm.flagged(hdu['SPECINDEX_MASK'].data[specindex['D4000'],:,:], 'UNRELIABLE'))
    ud4000[~numpy.ma.getmaskarray(ud4000)] = 0.0
    dn4000 = numpy.ma.MaskedArray(hdu['SPECINDEX'].data.copy()[specindex['Dn4000'],:,:],
          mask=bm.flagged(hdu['SPECINDEX_MASK'].data[specindex['Dn4000'],:,:], 'DONOTUSE'))
    udn4000 = numpy.ma.MaskedArray(hdu['SPECINDEX'].data.copy()[specindex['Dn4000'],:,:],
          mask=~bm.flagged(hdu['SPECINDEX_MASK'].data[specindex['Dn4000'],:,:], 'UNRELIABLE'))
    udn4000[~numpy.ma.getmaskarray(udn4000)] = 0.0

    # Get the limits to apply
    flux_lim = growth_lim(spxflx, 0.95, 1.05)
    t = numpy.ma.append(spxsnr, binsnr)
    snr_lim = growth_lim(t, 0.95, 1.05)
    bin_lim = [ numpy.ma.amin(binid), numpy.ma.amax(binid) ]

    res_lim = growth_lim(scfres, 0.95, 1.05)
    chi_lim = growth_lim(scrchi, 0.95, 1.05)
    t = numpy.ma.append(strvel, hagvel)
    vel_lim = growth_lim(t, 0.95, 1.05)
    t = numpy.ma.append(strsig, hagsig)
    sig_lim = growth_lim(t, 0.95, 1.05)

    t = numpy.ma.append( numpy.ma.append(hasflx, hagflx), numpy.ma.append(hbsflx, hbgflx) )
    hflx_lim = growth_lim(t, 0.95, 1.05)
    t = numpy.ma.append(d4000, dn4000)
    d4000_lim = growth_lim(t, 0.95, 1.05)


    w,h = pyplot.figaspect(1)
    fig = pyplot.figure(figsize=(2*w,2*h))

    dx = 0.22
    left = 0.05
    top=0.94
    dw = 0.005

    ax = init_ax(fig, [left, top-dx, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(numpy.ma.log10(spxflx), origin='lower', interpolation='nearest',
                   cmap='YlGnBu_r', zorder=3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(spxflx), origin='lower', extent=im.get_extent(),
#                     colors='k', levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'r-band S (spx)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)

    ax = init_ax(fig, [left+dx+dw, top-dx, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+2*imw+0.12+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(numpy.ma.log10(spxsnr), origin='lower', interpolation='nearest',
                   cmap='YlGnBu_r', zorder=3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'D4000', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'r-band S/N (spx)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
   
    ax.text(1.0, 1.1, r'{0}-{1}; {2}'.format(plt,ifu, hdu['PRIMARY'].header['MANGAID']),
            horizontalalignment='center', verticalalignment='center', transform=ax.transAxes,
            fontsize=20)
  
    ax = init_ax(fig, [left+2*dx+2*dw, top-dx, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(binid, origin='lower', interpolation='nearest', cmap='spectral', zorder=3,
                   extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'bin ID', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
 
    ax = init_ax(fig, [left+3*dx+3*dw, top-dx, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(numpy.ma.log10(binsnr), origin='lower', interpolation='nearest',
                   cmap='YlGnBu_r', zorder=3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'r-band S/N (bin)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)




    ax = init_ax(fig, [left, top-2*dx-dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(numpy.ma.log10(scfres), origin='lower', interpolation='nearest',
                   cmap='inferno', zorder=3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(spxflx), origin='lower', extent=im.get_extent(),
#                     colors='k', levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'log S/N', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'pPXF Frac. Resid.', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)

    ax = init_ax(fig, [left+dx+dw,  top-2*dx-dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+2*imw+0.12+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(scrchi, origin='lower', interpolation='nearest', cmap='inferno', zorder=3,
                   extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'D4000', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'${\rm pPXF}\ \chi^2_\nu$', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
    
    ax = init_ax(fig, [left+2*dx+2*dw,  top-2*dx-dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(strvel, origin='lower', interpolation='nearest', cmap='RdBu_r',
                   vmin=-300, vmax=300, zorder=3, extent=extent)
    im2 = ax.imshow(ustrvel, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'$V_\ast$', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
    
    ax = init_ax(fig, [left+3*dx+3*dw,  top-2*dx-dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(numpy.ma.log10(strsig), origin='lower', interpolation='nearest',
                   cmap='viridis', vmin=1.3, vmax=2.3, zorder=3, extent=extent)
    im2 = ax.imshow(ustrsig, origin='lower', interpolation='nearest', cmap='Reds_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'$\sigma_\ast$', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)




    ax = init_ax(fig, [left, top-3*dx-2*dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(hasflx, origin='lower', interpolation='nearest', cmap='inferno', zorder=3,
                   extent=extent)
    im2 = ax.imshow(uhasflx, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(spxflx), origin='lower', extent=im.get_extent(),
#                     colors='k', levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'log S/N', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'${\rm H}\alpha\ {\rm flux}$ (sum)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)

    ax = init_ax(fig, [left+dx+dw,  top-3*dx-2*dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+2*imw+0.12+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(hagflx, origin='lower', interpolation='nearest', cmap='inferno', zorder=3,
                   extent=extent)
    im2 = ax.imshow(uhagflx, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'D4000', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'${\rm H}\alpha\ {\rm flux}$ (Gauss)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
    
    ax = init_ax(fig, [left+2*dx+2*dw,  top-3*dx-2*dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(hagvel, origin='lower', interpolation='nearest', cmap='RdBu_r',
                   vmin=-300, vmax=300, zorder=3, extent=extent)
    im2 = ax.imshow(uhagvel, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'$V_{{\rm H}\alpha}$', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
    
    ax = init_ax(fig, [left+3*dx+3*dw,  top-3*dx-2*dw, dx, dx])
    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(numpy.ma.log10(hagsig), origin='lower', interpolation='nearest',
                   cmap='viridis', vmin=1.3, vmax=2.3, zorder=3, extent=extent)
    im2 = ax.imshow(uhagsig, origin='lower', interpolation='nearest', cmap='Reds_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'$\sigma_{{\rm H}\alpha}$', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)




    ax = init_ax(fig, [left, top-4*dx-3*dw, dx, dx])
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(hbsflx, origin='lower', interpolation='nearest', cmap='inferno', zorder=3,
                   extent=extent)
    im2 = ax.imshow(uhbsflx, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(spxflx), origin='lower', extent=im.get_extent(),
#                     colors='k', levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'log S/N', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'${\rm H}\beta\ {\rm flux}$ (sum)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)

    ax = init_ax(fig, [left+dx+dw,  top-4*dx-3*dw, dx, dx])
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+2*imw+0.12+0.005, 0.95-imw, 0.02, imw])
    im = ax.imshow(hbgflx, origin='lower', interpolation='nearest', cmap='inferno', zorder=3,
                   extent=extent)
    im2 = ax.imshow(uhbgflx, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
#    ax.text(0.5, 1.1, r'D4000', horizontalalignment='center', verticalalignment='center',
#            transform=ax.transAxes)
    ax.text(0.05, 0.05, r'${\rm H}\beta\ {\rm flux}$ (Gauss)', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
   
    ax = init_ax(fig, [left+2*dx+2*dw,  top-4*dx-3*dw, dx, dx])
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(d4000, origin='lower', interpolation='nearest', cmap='RdBu_r',
                   vmin=1.2, vmax=2.5, zorder=3, extent=extent)
    im2 = ax.imshow(ud4000, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'D4000', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)
    
    ax = init_ax(fig, [left+3*dx+3*dw,  top-4*dx-3*dw, dx, dx])
    ax.yaxis.set_major_formatter(NullFormatter())
#    cax = fig.add_axes([0.03+imw+0.005, 0.95-2*imw-0.10, 0.02, imw])
    im = ax.imshow(dn4000, origin='lower', interpolation='nearest', cmap='RdBu_r',
                   vmin=1.0, vmax=2.3, zorder=3, extent=extent)
    im2 = ax.imshow(udn4000, origin='lower', interpolation='nearest', cmap='Greens_r',
              vmin=0, vmax=1, zorder=4, alpha=0.3, extent=extent)
#    cnt = ax.contour(numpy.ma.log10(snr), origin='lower', extent=im.get_extent(), colors='k',
#                    levels = [1.0, 1.5, 2.0 ], linewidths=1.0, zorder=3)
#    pyplot.clabel(cnt, inline=1, fontsize=10, fmt='%.1f')
#    pyplot.colorbar(im, cax=cax)
    ax.text(0.05, 0.05, r'Dn4000', horizontalalignment='left',
            verticalalignment='center', transform=ax.transAxes)

    if ofile is not None:
        fig.canvas.print_figure(ofile, bbox_inches='tight')
    else:
        pyplot.show()

    fig.clear()
    pyplot.close(fig)

    

#-----------------------------------------------------------------------------

if __name__ == '__main__':
    t = time.clock()

    parser = ArgumentParser()

    parser.add_argument('plate', type=int, help='plate ID to process')
    parser.add_argument('ifudesign', type=int, help='IFU design to process')

    parser.add_argument('--drpver', type=str, help='DRP version', default=None)
    parser.add_argument('--dapver', type=str, help='DAP version', default=None)
    parser.add_argument('--dap_src', type=str, help='Top-level directory with the DAP source code;'
                        ' defaults to $MANGADAP_DIR', default=None)
    parser.add_argument("--analysis_path", type=str, help="main DAP output path", default=None)

    parser.add_argument("--plan_file", type=str, help="parameter file with the MaNGA DAP "
                        "execution plan to use instead of the default" , default=None)

    parser.add_argument('--daptype', type=str, help='DAP processing type', default=None)

    parser.add_argument('--output_file', type=str, help='name for output file', default=None)

    arg = parser.parse_args()

    # Set the the analysis path and make sure it exists
    analysis_path = default_analysis_path(drpver=arg.drpver, dapver=arg.dapver) \
                            if arg.analysis_path is None else arg.analysis_path

    plan_file = default_dap_plan_file(drpver=arg.drpver, dapver=arg.dapver,
                                      analysis_path=arg.analysis_path) if arg.plan_file is None \
                                            else arg.plan_file
    daptypes = []
    if arg.daptype is None:
        analysisplan = AnalysisPlanSet.from_par_file(plan_file)
        daptypes = [ default_dap_method(plan=p) for p in analysisplan ]
    else:
        daptypes = [arg.daptype]

    for daptype in daptypes:
        plan_qa_dir = default_dap_method_path(daptype, plate=arg.plate, ifudesign=arg.ifudesign,
                                              qa=True, drpver=arg.drpver, dapver=arg.dapver,
                                              analysis_path=analysis_path)
        print(plan_qa_dir)
        exit()
        if not os.path.isdir(plan_qa_dir):
            makedirs(plan_qa_dir)

        ofile = os.path.join(plan_qa_dir,
                             'manga-{0}-{1}-MAPS-{2}-spotcheck.png'.format(arg.plate,
                                                                           arg.ifudesign, daptype))

        spotcheck_images(analysis_path, daptype, arg.plate, arg.ifudesign)#, ofile=ofile)

    print('Elapsed time: {0} seconds'.format(time.clock() - t))



