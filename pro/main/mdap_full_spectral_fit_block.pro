;+
; NAME:
;       MDAP_FULL_SPECTRAL_FIT_BLOCK
;
; PURPOSE:
;   MAIN BLOCK FOR MANGA_DAP:
;
;   If the block is to be performed:
;       - Get the initial guess kinematics and then run the full
;         spectral fitting procedure MDAP_SPECTRAL_FITTING.
;       - In steps, depending on how MDAP_SPECTRAL_FITTING was used,
;         write the resulting pPXF and GANDALF results to the output
;         file.
;   Else:
;       - Read those products required by subsequent DAP blocks.
;
; CALLING SEQUENCE:
;       MDAP_FULL_SPECTRAL_FIT_BLOCK, manga_dap_version, execution_plan, perform_block, $
;                                     star_kin_interp, gas_kin_interp, bin_indx, $
;                                     velocity_initial_guess, velocity_dispersion_initial_guess, $
;                                     tpl_library_keys, ems_line_keys, header, wave, sres, nbin, $
;                                     bin_flux, bin_ivar, bin_mask, tpl_wave, tpl_flux, tpl_ivar, $
;                                     tpl_mask, obj_fit_mask_ppxf, weights_ppxf, bestfit_ppxf, $
;                                     obj_fit_mask_gndf, weights_gndf, bestfit_gndf, eml_model, $
;                                     stellar_kinematics, eml_par=eml_par, $
;                                     bvls_shared_lib=bvls_shared_lib, /quiet, /oversample, $
;                                     /plot, /dbg
;
; INPUTS:
;       manga_dap_version MaNGADAPVersion
;               Structure used to keep track of various
;               version-controlled procedures in the DAP.
;      
;       execution_plan ExecutionPlan
;               Structure providing plan and parameters needed for the
;               analyses.
;
;       perform_block RequiredAnalysisBlock
;               Structure defining which analysis blocks are to be
;               performed.
;
;       star_kin_interp dblarr[N][2]
;               Interpolated set of stellar kinematics based on a
;               provided analysis prior.
;
;       gas_kin_interp dblarr[N][2]
;               Interpolated set of gas kinematics based on a provided
;               analysis prior.
;
;       bin_indx intarr[N]
;               Index of the bin that contains each DRP spectrum.
;
;       velocity_initial_guess double
;               Initial guess velocity for the galaxy.
;
;       velocity_dispersion_initial_guess double
;               Initial guess velocity dispersion for the galaxy.
;
;       tpl_library_keys strarr
;               Keywords for the available template libraries
;
;       ems_line_keys
;               Keywords for the available emission-line parameter files
;       header strarr[]
;               Fits header
;            
;       wave dblarr[T]
;               Wavelength of each spectral channel T.
;       
;       sres dblarr[T]
;               Spectral resolution at each wavelength channel T.
;
;       nbin lonarr[B]
;               Number of spectra coadded in each bin.
;
;       bin_flux dblarr[B][T]
;               Flux in each of the B binned spectra at each of the T
;               spectral channels.
;
;       bin_ivar dblarr[B][T]
;               Inverse variance in the binned spectra.
;
;       bin_mask dblarr[B][T]
;               Bad pixel mask for the binned spectra.
;
;       tpl_wave dblarr[S]
;               The vector with the wavelength coordinate of every S spectral
;               channel.  The spectra are binned to a constant step in
;               log10(wavelength), to match the DRP-produced spectra.
;
;       tpl_flux dblarr[T][S]
;               The normalized flux of the template library.
;
;       tpl_ivar dblarr[T][S]
;               The inverse variance of the normalized flux.
;
;       tpl_mask dblarr[T][S]
;               The bad pixel mask of the template library (0/1=good/bad)
;
;
; OPTIONAL INPUTS:
;       eml_par EmissionLine[E]
;               The parameters for each of E emission lines used during the
;               fitting procedures.  The EmissionLine structure is defined as
;               follows (see MDAP_READ_EMISSION_LINE_PARAMETERS):
;
;               { EmissionLine, i:0L, name:'', lambda:0.0d, action:'', $
;                     kind:'', a:0.0d, v:0.0d, s:0.0d, fit:'' }
;
;               Once created, one selects, for example, the name of the 3rd
;               input line using: eml_par[2].name
;
;       bvls_shared_lib string
;               Path to the external FORTRAN library, which contains the fortran
;               versions of mdap_bvls.pro.  If not specified, or if the path is
;               invalid, the default internal IDL mdap_bvls code is used. 
;
; OPTIONAL KEYWORDS:
;       /quiet
;               Suppress information printed to the screen.
;
;       /oversample
;               Turn on oversampling in pPXF.
;
;       /plot
;               Produce the plots generated by PPXF and GANDALF
;
;       /dbg
;               Only fit the first spectrum then return, used as a test
;               during debugging.
;
; OUTPUT:
;       obj_fit_mask_ppxf dblarr[N][QQ]
;               Bad pixel mask for pixels fitted by PPXF.  Pixels included/not
;               included in the fit are given values of 0.0/1.0.
;
;       weights_ppxf dblarr[N][T]
;               Template weights for each spectrum obtained by PPXF.
;
;       bestfit_ppxf dblarr[N][QQ]
;               Best fitting spectrum obtained by PPXF for each of the N
;               spectra.
;
;       obj_fit_mask_gndf dblarr[N][QQ]
;               Bad pixel mask for pixels fitted by GANDALF.  Pixels
;               included/not included in the fit are given values of 0.0/1.0.
;
;       weights_gndf dblarr[N][T]
;               Template weights for each spectrum obtained by GANDALF.
;
;       bestfit_gndf dblarr[N][QQ]
;               Best fitting spectrum obtained by GANDALF for each of the N
;               spectra.
;
;       eml_model dblarr[N][QQ]
;               Best-fitting emission-line-only model for each of the N spectra
;               obtained by GANDALF.
;
;       stellar_kinematics dblarr[N][M]
;               The best-fit stellar kinematics (M moments) for each of the N
;               fitted input galaxy spectra.
;
; OPTIONAL OUTPUT:
;
; COMMENTS:
;
; EXAMPLES:
;
; BUGS:
;
; PROCEDURES CALLED:
;       MDAP_SPECTRAL_FITTING
;       MDAP_INITIALIZE_GUESS_KINEMATICS
;       MDAP_WRITE_OUTPUT
;       MDAP_INSTR_DISPERSION_AT_EMISSION_LINE
;       MDAP_DEFINE_OUTPUT
;       MDAP_READ_OUTPUT
;
; REVISION HISTORY:
;       01 Feb 2015: Pulled from manga_dap.pro by K. Westfall (KBW)
;       19 Aug 2015: (KBW) Header passed to procedure, so no need to
;                          read it from the existing file when writing
;                          the output.  Corrected in calls to
;                          MDAP_WRITE_OUTPUT.
;       08 Mar 2016: (KBW) Added oversample as input keyword
;-
;------------------------------------------------------------------------------

PRO MDAP_FULL_SPECTRAL_FIT_BLOCK, $
                manga_dap_version, execution_plan, perform_block, star_kin_interp, gas_kin_interp, $
                bin_indx, velocity_initial_guess, velocity_dispersion_initial_guess, $
                tpl_library_keys, ems_line_keys, header, wave, sres, nbin, bin_flux, bin_ivar, $
                bin_mask, tpl_wave, tpl_flux, tpl_ivar, tpl_mask, obj_fit_mask_ppxf, weights_ppxf, $
                bestfit_ppxf, obj_fit_mask_gndf, weights_gndf, bestfit_gndf, eml_model, $
                stellar_kinematics, eml_par=eml_par, bvls_shared_lib=bvls_shared_lib, quiet=quiet, $
                oversample=oversample, plot=plot, dbg=dbg

        if perform_block.spec_fit eq 1 then begin

            ;-----------------------------------------------------------
            ; Version control
            MDAP_SPECTRAL_FITTING, version=manga_dap_version.spectral_fitting

            ; TODO: Allow for starting guesses from a cross-correlation
            ; with a guess template?

            ; TODO: Stellar kinematic guess are always 4 (as required by
            ; MDAP_SPECTRAL_FITTING) as opposed to being set by
            ; execution_plan.analysis_par.moments.

            ;-----------------------------------------------------------
            ; Get the starting guesses for the kinematics in each binned
            ; spectrum; this now only provides guess kinematics for the
            ; first two moments! (22 Mar 2015)
            MDAP_INITIALIZE_GUESS_KINEMATICS, n_elements(nbin), execution_plan.analysis_prior, $
                                              star_kin_interp, gas_kin_interp, bin_indx, $
                                              velocity_initial_guess, $
                                              velocity_dispersion_initial_guess, $
                                              star_kin_guesses, gas_kin_guesses

;           print, mean(star_kin_guesses[*,0])
;           print, mean(star_kin_guesses[*,1])
;           print, mean(gas_kin_guesses[*,0])
;           print, mean(gas_kin_guesses[*,1])

            ;-----------------------------------------------------------
            ; Perform the spectral fit; the wavelength_output vector is
            ; ignored because the output wavelengths should be exactly
            ; the same as the input vector (wave).
            MDAP_SPECTRAL_FITTING, wave, bin_flux, bin_ivar, bin_mask, sres, tpl_wave, tpl_flux, $
                                   tpl_ivar, tpl_mask, star_kin_guesses, gas_kin_guesses, $
                                   wavelength_output, obj_fit_mask_ppxf, $
                                   weights_ppxf, add_poly_coeff_ppxf, mult_poly_coeff_ppxf, $
                                   bestfit_ppxf, chi2_ppxf, obj_fit_mask_gndf, weights_gndf, $
                                   mult_poly_coeff_gndf, bestfit_gndf, chi2_gndf, eml_model, $
                                   stellar_kinematics, stellar_kinematics_err, $
                                   emission_line_kinematics, emission_line_kinematics_err, $
                                   emission_line_omitted, emission_line_kinematics_individual, $
                                   emission_line_kinematics_individual_err, $
                                   emission_line_intens, emission_line_intens_err, $
                                   emission_line_fluxes, emission_line_fluxes_err, $
                                   emission_line_EW, emission_line_EW_err, reddening_output, $
                                   reddening_output_err, analysis_par=execution_plan.analysis_par, $
                                   default_velocity=velocity_initial_guess, $
                                   default_dispersion=velocity_dispersion_initial_guess, $
                                   eml_par=eml_par, external_library=bvls_shared_lib, $
                                   wave_range_analysis=execution_plan.wave_range_analysis, $
                                   ppxf_only=perform_block.ppxf_only, quiet=quiet, $
                                   oversample=oversample, plot=plot, dbg=dbg

;           print, stellar_kinematics[0,0]
;           print, emission_line_kinematics[0,0]
;           stop

            ; TODO: Add the spectral fitting version to the header of
            ; the output file, and add information to the log file

            ;-----------------------------------------------------------
            ; Write the analysis wavelength range to the header
            MDAP_WRITE_OUTPUT, execution_plan.ofile, header=header, $
                               w_range_analysis=execution_plan.wave_range_analysis, $
                               threshold_ston_analysis=execution_plan.threshold_ston_analysis, $
                               quiet=quiet;, /read_header
            
            ;-----------------------------------------------------------
            ; Write the emission line parameters
            if n_elements(eml_par) ne 0 then $
                MDAP_WRITE_OUTPUT, execution_plan.ofile, header=header, eml_par=eml_par, quiet=quiet

            ;-----------------------------------------------------------
            ; Write the stellar kinematics results
            MDAP_WRITE_OUTPUT, execution_plan.ofile, header=header, $
                               tpl_library_key=tpl_library_keys[execution_plan.tpl_lib], $
                               obj_fit_mask_ppxf=obj_fit_mask_ppxf, weights_ppxf=weights_ppxf, $
                               add_poly_coeff_ppxf=add_poly_coeff_ppxf, $
                               mult_poly_coeff_ppxf=mult_poly_coeff_ppxf, $
                               bestfit_ppxf=bestfit_ppxf, chi2_ppxf=chi2_ppxf, $
                               stellar_kinematics_fit=stellar_kinematics, $
                               stellar_kinematics_err=stellar_kinematics_err, $
                               analysis_par=execution_plan.analysis_par, quiet=quiet;, /read_header


            ;-----------------------------------------------------------
            if perform_block.ppxf_only eq 0 then begin
                
                ;-------------------------------------------------------
                ; Get the instrumental dispersion at the fitted line
                ; centers
                MDAP_INSTR_DISPERSION_AT_EMISSION_LINE, wave, sres, eml_par, $
                                                            emission_line_omitted, $
                                                            emission_line_kinematics_individual, $
                                                            emission_line_sinst

                ;-------------------------------------------------------
                ; Write the results of the emission-line fitting
                
                MDAP_WRITE_OUTPUT, execution_plan.ofile, header=header, $
                                   ems_line_key=ems_line_keys[execution_plan.ems_par], $
                                   eml_par=eml_par, obj_fit_mask_gndf=obj_fit_mask_gndf, $
                                   weights_gndf=weights_gndf, $
                                   mult_poly_coeff_gndf=mult_poly_coeff_gndf, $
                                   emission_line_kinematics_avg=emission_line_kinematics, $
                                   emission_line_kinematics_aer=emission_line_kinematics_err, $
                                   chi2_gndf=chi2_gndf, $
                                emission_line_kinematics_ind=emission_line_kinematics_individual, $
                            emission_line_kinematics_ier=emission_line_kinematics_individual_err, $
                                   emission_line_sinst=emission_line_sinst, $
                                   emission_line_omitted=emission_line_omitted, $
                                   emission_line_intens=emission_line_intens, $
                                   emission_line_interr=emission_line_intens_err, $
                                   emission_line_fluxes=emission_line_fluxes, $
                                   emission_line_flxerr=emission_line_fluxes_err, $
                                   emission_line_EWidth=emission_line_EW, $
                                   emission_line_EW_err=emission_line_EW_err, $
                                   reddening_val=reddening, reddening_err=reddening_err, $
                                   bestfit_gndf=bestfit_gndf, eml_model=eml_model, quiet=quiet
                                   ;, /read_header
            endif

        ;---------------------------------------------------------------
        ; Read the necessary data from the existing file for subsequent
        ; blocks
        endif else begin

            print, 'READING FULL SPECTRAL FIT DATA'

            ; TODO: Here, I attempt to read the emission-line fitting
            ; results.  The choice of the weights to use in the next
            ; block critically depends on the size of the weights_gndf
            ; array.  If it doesn't match the necessary size,
            ; weights_ppxf is used!  Add a flag to the header saying the
            ; extension is populated?

            MDAP_DEFINE_OUTPUT, obj_fit_mask_ppxf=obj_fit_mask_ppxf, weights_ppxf=weights_ppxf, $
                                bestfit_ppxf=bestfit_ppxf, $
                                stellar_kinematics_fit=stellar_kinematics, $
                                obj_fit_mask_gndf=obj_fit_mask_gndf, weights_gndf=weights_gndf, $
                                bestfit_gndf=bestfit_gndf, eml_model=eml_model

            MDAP_READ_OUTPUT, execution_plan.ofile, header=header, $
                              obj_fit_mask_ppxf=obj_fit_mask_ppxf, weights_ppxf=weights_ppxf, $
                              bestfit_ppxf=bestfit_ppxf, $
                              stellar_kinematics_fit=stellar_kinematics, $
                              obj_fit_mask_gndf=obj_fit_mask_gndf, weights_gndf=weights_gndf, $
                              bestfit_gndf=bestfit_gndf, eml_model=eml_model
        endelse
END

